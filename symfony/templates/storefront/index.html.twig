{% extends 'base.html.twig' %}

{% block title %}Hello StorefrontDemoController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Produkty</h1>
    <ul id="products"></ul>

    <button id="checkout" style="display:none;">
        Przejdź do płatności
    </button>

    <script type="module">
        const SHOP = "{{ shop }}";
        const TOKEN = "{{ token }}";
        const VER   = "{{ ver }}";

        async function fetchGraphQL(query, variables = {}) {
            const res = await fetch(`https://${SHOP}/api/${VER}/graphql.json`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Shopify-Storefront-Access-Token": TOKEN
                },
                body: JSON.stringify({ query, variables })
            });
            const json = await res.json();
            if (json.errors) {
                console.error("GraphQL errors:", json.errors);
                throw new Error("Request failed");
            }
            return json.data;
        }
    </script>

    <script type="module">
        const QUERY_PRODUCTS = `
        {
          products(first: 5) {
            edges {
              node {
                id
                title
                variants(first: 1) {
                  edges {
                    node { id title }
                  }
                }
              }
            }
          }
        }`;

                (async function loadProducts() {
                    const data = await fetchGraphQL(QUERY_PRODUCTS);
                    const list = document.getElementById("products");

                    data.products.edges.forEach(edge => {
                        const p = edge.node;
                        const li = document.createElement("li");
                        li.textContent = p.title;

                        const variant = p.variants.edges[0]?.node;
                        if (variant) {
                            const btn = document.createElement("button");
                            btn.textContent = "Dodaj do koszyka";
                            btn.onclick = () => addVariant(variant.id);
                            li.appendChild(document.createTextNode(" "));
                            li.appendChild(btn);
                        }

                        list.appendChild(li);
                    });
                })();
    </script>

    <script type="module">
        const M_CART_CREATE = `
            mutation {
              cartCreate {
                cart { id checkoutUrl }
                userErrors { message }
              }
            }`;

            const M_LINES_ADD = `
            mutation AddLines($cartId: ID!, $lines: [CartLineInput!]!) {
              cartLinesAdd(cartId: $cartId, lines: $lines) {
                cart {
                  id
                  totalQuantity
                  checkoutUrl
                  lines(first: 10) {
                    edges { node { id quantity merchandise { ... on ProductVariant { id title } } } }
                  }
                }
                userErrors { message }
              }
            }`;

        let cartId = null;
        let checkoutUrl = null;

        async function ensureCart() {
            if (cartId) return cartId;
            const { cartCreate } = await fetchGraphQL(M_CART_CREATE);
            if (cartCreate.userErrors?.length) {
                throw new Error(cartCreate.userErrors.map(e => e.message).join(", "));
            }
            cartId = cartCreate.cart.id;
            checkoutUrl = cartCreate.cart.checkoutUrl;
            return cartId;
        }

        async function addVariant(variantGid, qty = 1) {
            await ensureCart();
            const { cartLinesAdd } = await fetchGraphQL(M_LINES_ADD, {
                cartId,
                lines: [{ merchandiseId: variantGid, quantity: qty }]
            });
            if (cartLinesAdd.userErrors?.length) {
                throw new Error(cartLinesAdd.userErrors.map(e => e.message).join(", "));
            }
            checkoutUrl = cartLinesAdd.cart.checkoutUrl;
            document.getElementById("checkout").style.display = "inline-block";
        }

        document.getElementById("checkout").addEventListener("click", () => {
            window.location.href = checkoutUrl;
        });

        // 6) Zaktualizuj render produktów, by wstawić przyciski "Dodaj do koszyka"

        async function loadProducts() {
            const data = await fetchGraphQL(QUERY_PRODUCTS);
            const list = document.getElementById("products");

            data.products.edges.forEach(edge => {
                const p = edge.node;
                const li = document.createElement("li");
                li.textContent = p.title;

                const variant = p.variants.edges[0]?.node; // najprościej: pierwszy wariant
                if (variant) {
                    const btn = document.createElement("button");
                    btn.textContent = "Dodaj do koszyka";
                    btn.addEventListener("click", async () => {
                        try {
                            await addVariant(variant.id, 1);
                            btn.textContent = "Dodano!";
                        } catch (e) {
                            console.error(e);
                            alert("Błąd dodawania do koszyka: " + e.message);
                        }
                    });
                    li.appendChild(document.createTextNode(" "));
                    li.appendChild(btn);
                }

                list.appendChild(li);
            });
        }

        // wywołanie po definicji funkcji (jeśli usunąłeś wcześniejsze)
        loadProducts();
    </script>


</div>
{% endblock %}
